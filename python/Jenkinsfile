#!/usr/bin/env groovy

image_name = "plaidcloud/faas"

podTemplate(label: 'io',
  containers: [
    containerTemplate(name: 'docker', image: 'docker:18.09.5', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'kubectl', image: "lachlanevenson/k8s-kubectl:v1.13.5", ttyEnabled: true, command: 'cat')
  ],
  volumes: [
    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')
  ],
  serviceAccount: 'jenkins'
)
{
  node(label: 'io') {
    properties([
      parameters([
        booleanParam(name: 'no_cache', defaultValue: false, description: 'Adds --no-cache flag to docker build command(s).')
      ])
    ])
    container('docker') {
      docker.withRegistry('', 'plaid-docker') {     
        // Checkout source before doing anything else
        scm_map = checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false]],
            submoduleCfg: [],
            userRemoteConfigs: scm.userRemoteConfigs
        ])

        // When building from a PR event, we want to read the branch name from the CHANGE_BRANCH binding. This binding does not exist on branch events.
        CHANGE_BRANCH = env.CHANGE_BRANCH ?: scm_map.GIT_BRANCH.minus(~/^origin\//)

        if (CHANGE_BRANCH == 'master') {
          dir("python") {
            stage('Run Linter') {
              docker.build("${image_name}:lint", "--pull --target=lint .").withRun('-t') {c ->
                sh """
                  docker wait ${c.id}
                  sh "docker logs ${c.id}>pylint.log"
                """
              }
              recordIssues tool: pyLint(pattern: 'pylint.log'), qualityGates: [[threshold: 1, type: 'TOTAL_HIGH', unstable: true]]
            }

            stage('Run Unit Tests') {
              // TODO: Actually run unit tests. This will probably require another container template for workflow-test.
              image = docker.build("${image_name}:workflow-test", "--pull -f tests/fixtures/openfaas-functions/test/Dockerfile tests/fixtures/openfaas-functions/test")
            }
            // No need to publish dev branches, we can change this later.
            // TODO: We need to tag this revision with a version number.
            // TODO Template out build parameters here. 
            stage('Trigger Downstream Job') {
              build job: 'plaid/master', wait: false, parameters: [[$class: 'BooleanParameterValue', name: 'no_cache', value: true]]
            }
          }
        }
      }
    }
  }
}
